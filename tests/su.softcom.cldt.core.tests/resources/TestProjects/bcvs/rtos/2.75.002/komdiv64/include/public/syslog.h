#ifndef PUBLIC_SYSLOG_H
#define PUBLIC_SYSLOG_H
#include <stdarg.h>
#include <sys/types.h>
#include <version.h>

#if (OS_MAJOR == 2) && defined KERNEL && !defined __MATH_H__
#define log syslog
#define LOG syslog
#endif

/* Параметры системного журнала (logopt)       */
#define LOG_PID         0x01 /* Log the process ID with each message.                  */
#define LOG_CONS        0x02 /* Log to the system console on error.                    */
#define LOG_NDELAY      0x04 /* Connect to syslog daemon immediately.                  */
#define LOG_ODELAY      0x08 /* Delay open until syslog() is called.                   */
#define LOG_NOWAIT      0x10 /* Do not wait for child processes.                       */

/*
 * The following symbolic constants shall be defined
 * as possible values of the facility argument to openlog():
 */

#define LOG_KERN      0x0100 /* Reserved for message generated by the system.          */
#define LOG_USER      0x0200 /* Message generated by a process.                        */
#define LOG_MAIL      0x0300 /* Reserved for message generated by mail system.         */
#define LOG_NEWS      0x0400 /* Reserved for message generated by news system.         */
#define LOG_UUCP      0x0500 /* Reserved for message generated by UUCP system.         */
#define LOG_DAEMON    0x0600 /* Reserved for message generated by system daemon.       */
#define LOG_AUTH      0x0700 /* Reserved for message generated by authorization daemon.*/
#define LOG_CRON      0x0800 /* Reserved for message generated by clock daemon.        */
#define LOG_LPR       0x0900 /* Reserved for message generated by printer system.      */
#define LOG_LOCAL0    0x0a00 /* Reserved for local use.                                */
#define LOG_LOCAL1    0x0b00 /* Reserved for local use.                                */
#define LOG_LOCAL2    0x0c00 /* Reserved for local use.                                */
#define LOG_LOCAL3    0x0d00 /* Reserved for local use.                                */
#define LOG_LOCAL4    0x0e00 /* Reserved for local use.                                */
#define LOG_LOCAL5    0x0f00 /* Reserved for local use.                                */
#define LOG_LOCAL6    0x1000 /* Reserved for local use.                                */
#define LOG_LOCAL7    0x1100 /* Reserved for local use.                                */

/*
 * The following shall be declared as macros for constructing
 * the maskpri argument to setlogmask().
 * The following macros expand to an expression of
 * type int when the argument pri is an expression of type int:
 */

#define LOG_MASK(pri)   (1<<pri)       /* A mask for priority pri.                     */

/*
 * The following constants shall be
 * defined as possible values for the
 * priority argument of syslog(): severity/priority
 */

#define LOG_EMERG       0x01 /* A panic condition was reported to all processes.       */
#define LOG_ALERT       0x02 /* A condition that should be corrected immediately.      */
#define LOG_CRIT        0x03 /* A critical condition.                                  */
#define LOG_ERR         0x04 /* An error message.                                      */
#define LOG_WARNING     0x05 /* A warning message.                                     */
#define LOG_NOTICE      0x06 /* A condition requiring special handling.                */
#define LOG_INFO        0x07 /* A general information message.                         */
#define LOG_DEBUG       0x08 /* A message useful for debugging programs.               */

#define LOG_NL          0x80000000     /* добавить конец строки                        */
#define LOG_LAZHEAD     0x40000000     /* заголовок в стиле logMsg                     */
#define LOG_BSDFMT      0x20000000     /* форматирование в стиле free bsd              */
#define LOG_NOHEAD      0x10000000     /* не выводить загловок                         */
#define LOG_NODAEMON    0x08000000     /* выводить сообщение из функции syslog         */
/*
 * The following shall be declared as
 * functions and may also be defined as macros.
 * Function prototypes shall be provided.
 */

void  closelog(void);
void  openlog(const char *, int, int);
int   setlogmask(int);

/* Размер буфера для одного сообщения, выводимого в системный журнал */
//#define SYSLOG_BUF 256
#define IDENT_MAX  16

#ifdef KERNEL
#include <sys/queue.h>
/* Структура буфера системного журнала         */
struct syslog_buf_desc {
   STAILQ_ENTRY(syslog_buf_desc) sbd_next;
   int                           sbd_size;
   int                           sbd_flags;      /* пар-ры системного журнала (logopt) */
   char                          sbd_buf[1];
};
//
/*
 * Есть три описания системного журнала
 *  syslog_start  - писатель конфигурации системного журнала;
 *  syslog_desc   - описатель системного журнала;
 *  syslog_memory - описатель памяти системного журнала.
 *
 * Структура syslog_start используется при инициализации системы (системного журнала),
 * содержит параметры конфигурирования и пользовательские функции системного журнала.
 * Изначально создается в модуле ос3000.c с именем sls,
 * затем копируется в статическую переменную syslog_s модуля syslog.c.
 *
 * Описатель системного журнала syslog_desc создается при старте процесса,
 * указатель на syslog_desc хранится в описателе (struct  proc) процесса.
 */
/* Описатель флеш-памяти для системного журнала    */
struct syslog_flash
{
   char *startAddr ;
   char *currAddr ;
   char *endAddr ;
   int  sizeSec ;
   int  size ;
   int  finit ;
   char *baseAddr ;
} ;
/* Описатель сохраняемой памяти для системного журнала */
struct syslog_prsmem
{
   void *prsmemD ;                  /* указатель на описатель раздела сохраняемой памяти */
   int  finit ;
   int  (*prsmem_Find)(pid_t pid, const char *, void **);              /* функция поиска раздела    */
   char prsmem_name[40] ;                              /* имя раздела сохраняемой памяти */
} ;
/* Описатель конфигурации системного журнала    */
#define  LOG_MSG_NOHEADER       0x01                  /* Сообщение не содержит заголовка */
#define  LOG_MSG_TO_STDOUT      0x02                  /* Сообщения выводить в stdout     */
#define  LOG_MSG_TO_STDERR      0x04                  /* Сообщения выводить в stderr     */
#define  LOG_MSG_TO_CONSOLE     0x08                  /* Сообщения выводить на консоль   */
#define  LOG_MSG_TO_FILE        0x10                  /* Сообщения выводить в file       */
#define  LOG_MSG_TO_MEMORY      0x20           /* Сообщения выводить в persistent memory */
#define  LOG_MSG_TO_FLASH       0x40               /* Сообщения выводить во flash-память */
#define  LOG_MSG_TO_USERFUNC    0x80                 /* Сообщения выводить user function */
#define  LOG_ERASE_FLASHMEMORY 0x100                              /* Очищать флеш-память */
#define  LOG_MEM_FULL_POLICY   0x200     /* При заполнении памяти начать писать с начала */
#if 0
#define  LOG_EMERG_TO_MEMORY   0x400            /* Аварийные сообщения выводить в память */
#define  LOG_EMERG_TO_FLASH    0x800      /* Аварийные сообщения выводить во флеш-память */
#endif /* 0 */
#define  LOG_GLOB_USERFUNC   0x10000         /* можно выполнять пользовательские функции */
#define  LOG_MSG_OPEN        0x20000                  /* Функция sls_Open уже вызывалась */
#if 0
#define  LOG_EMERG_OPEN      0x40000             /* Функция sls_OpenEmerg уже вызывалась */
#endif
#define  LOG_MSG_CONSOLE_AS  0x80000           /* Дублировать вывод сообщений на консоль */
struct syslog_start {
   int  sls_BufSize;                   /* размер буфера системного журнала             */
   int  sls_BufCount;                  /* число буферов системного журнала             */
   void *(*sls_Open)();                /* пользоват. функция открытия сист. журнала    */
   int  (*sls_Close)(void *);          /* пользоват. функция закрытия сист. журнала    */
   int  (*sls_Write)(void *,const char *,size_t size); /* пользоват. функция вывода    */
   void   *sls_UserPtr;                /* значение, возвращенное функцией sls_Open()   */
   int sls_flags ;                                         /* флаги системного журнала */
   char *sls_filename ;                                                   /* имя файла */
   char *sls_console ;                                                  /* имя консоли */
#if 0
   void *(*sls_OpenEmerg)();           /* функция открытия для катастрофических ошибок */
   int  (*sls_WriteEmerg)(void *,const char *,size_t size);       /* функция вывода    */
   void   *sls_UserPtrEmerg;      /* значение, возвращенное функцией sls_OpenEmerg()   */
#endif /* 0 */
   struct syslog_flash sls_flash ;                             /* описание флеш-памяти */
   char *sls_prsmem_name ;                           /* имя раздела сохраняемой памяти */
   int  (*sls_prsmem_Find)(pid_t pid, const char *, void **); /* фун-я поиска раздела сохр памяти */
   char *sls_memory_file ;  /* имя файла, куда выгружать память (сохраняемую или флеш) */
   int  (*sls_moveMemory2File)(unsigned long size, const char *nameF) ;     /* функция */
             /* выгрузки памяти (сохраняемой или флеш) в файл с именем sls_memory_file */
   unsigned long sls_sizeF ;                             /* для выгрузки памяти в файл */
};
#define   MAX_COUNT_FILES  99

/* Описатель системного журнала */
struct syslog_desc
{
    char    sd_ident[IDENT_MAX];       /* префикс сообщений                            */
    int     sd_logopt;
    int     sd_facility;
    int     sd_mask;                   /* маска уровней серьезности сообщений          */
    int     sd_bufsize;
};
//int syslogStart(struct syslog_start *sls);
/*----- getDescPrsmem - возвращает указатель на описание сохраняемой памяти ---------*/
struct syslog_prsmem *logGetDescPrsmem(void) ;
/*----------- getDescFlash - возвращает указатель на описание флеш-памяти -----------*/
struct syslog_flash *logGetDescFlash(void) ;
/*--------------- logGetAddrSmFlags - возвращает указатель на sm_flags  -------------*/
int *logGetAddrSmFlags(void) ;
/*---- logMoveMemory2File - выгрузка памяти (сохраняемой или флеш) в файл -----------*/
int logMoveMemory2File(void) ;
int prsmemMove2File_(unsigned long size, const char *nameF) ;
int flashMove2File_(unsigned long size, const char *nameF) ;
/*-------------- Open2File_ - открытие файла для выгрузки ---------------------------*/
int Open2File_(unsigned long *size, const char *nameF) ;
int write_fp_(int fd, void *buff, size_t size, unsigned long maxSize) ;
int write_label_seek(int fd) ;
#endif   /* KERNEL */

void  syslog(int, const char *, ...);
void  vsyslog(int priority, const char *message, va_list ap);
int   psyslog(const char *message, ...);

void  syslogSetOpen(void *(*)());
void  syslogSetClose(int (*)());
void  syslogSetWrite(int (*)(void *,const char *,size_t size));

/* для sysShell-демона: */
# define  STDOUT_TO_SYSLOG      0x01
# define  SYSTEM_COM_PRINT      0x02
# define  SYSSHELL_STARTED   0x10000  

#endif /* !PUBLIC_SYSLOG_H */
